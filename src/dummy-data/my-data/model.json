[
  {
    "is_monetized": false,
    "fit_id": "ea026720-0f0f-11e9-ab14-d663bd873d93",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": null,
    "composer_id": null,
    "date": "2019-01-04T00:00:00.000Z",
    "endpoints": {
      "sync": "https://uat-api.volantis.io/v1/predict/sync/model/2d229a74-0f11-11e9-ab14-d663bd873d93"
    },
    "endpoints_service_id": {
      "sync": "2d229bb4-0f11-11e9-ab14-d663bd873d93"
    },
    "fit_status": "DONE",
    "input_col": [
      "sentence"
    ],
    "log_error": null,
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": "ea026720-0f0f-11e9-ab14-d663bd873d93",
    "output_col": [
      "named-entity"
    ],
    "params": null,
    "parents_data_id": null,
    "parents_data_price": null,
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": null,
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "Pretrained Model - NER Bahasa Indonesia",
    "running_time": null,
    "schema_data_output_input": {
      "sentence": "{\"datatype\": \"string\", \"example\": \"Anto sedang bekerja di kantor yang terletak di Jakarta\"}"
    },
    "schema_data_output_output": {
      "named-entity": "{\"datatype\": \"array<array<string>>\", \"example\": [[\"Anto\", \"B-org\"], [\"sedang\", \"I-org\"], [\"bekerja\", \"I-org\"], [\"di\", \"O\"], [\"kantor\", \"B-loc\"], [\"yang\", \"I-loc\"], [\"terletak\", \"O\"], [\"di\", \"O\"], [\"Jakarta\", \"B-loc\"]]}",
      "sentence": "{\"datatype\": \"string\", \"example\": \"Anto sedang bekerja di kantor yang terletak di Jakarta\"}"
    },
    "size_data_input": null,
    "spark_job_id": null,
    "username": null,
    "pricing": {
      "minimum_price": 0,
      "actual_price": 0
    }
  },
  {
    "is_monetized": true,
    "fit_id": "81623894-0352-11e9-8eb2-f2801f1b9fd1",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": null,
    "composer_id": null,
    "date": "2018-12-19T00:00:00.000Z",
    "endpoints": {
      "sync": "https://uat-api.volantis.io/v1/predict/sync/model/4e3b9dc2-035a-11e9-8eb2-f2801f1b9fd1"
    },
    "endpoints_service_id": {
      "sync": "4e3ba056-035a-11e9-8eb2-f2801f1b9fd1"
    },
    "fit_status": "DONE",
    "input_col": [
      "sentence",
      "language"
    ],
    "log_error": null,
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": "81623894-0352-11e9-8eb2-f2801f1b9fd1",
    "output_col": [
      "pos-tag"
    ],
    "params": null,
    "parents_data_id": null,
    "parents_data_price": null,
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": null,
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "Pretrained Model - Pos Tagger",
    "running_time": null,
    "schema_data_output_input": {
      "language": "{\"datatype\": \"string\", \"example\": \"eng\"}",
      "sentence": "{\"datatype\": \"string\", \"example\": \"i want to eat\"}"
    },
    "schema_data_output_output": {
      "language": "{\"datatype\": \"string\", \"example\": \"eng\"}",
      "pos-tag": "{\"datatype\": \"map<string,string>\", \"example\": {\"i\": \"NN\", \"want\": \"VBP\", \"to\": \"TO\", \"eat\": \"VB\"}}",
      "sentence": "{\"datatype\": \"string\", \"example\": \"i want to eat\"}"
    },
    "size_data_input": null,
    "spark_job_id": null,
    "username": null,
    "pricing": {
      "minimum_price": 0,
      "actual_price": 0
    }
  },
  {
    "is_monetized": true,
    "fit_id": "c44a2374-dce7-11e8-8699-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - 1300 Laptop Prices', 'Adapter', 'RandomForestRegressor', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464', 'columns': ['type', 'name', 'size', 'screen_resolution', 'cpu', 'gpu', 'ram', 'memory', 'op_sys', 'weight', 'price'], 'data_in_coloumn_types': ['string', 'string', 'double', 'string', 'string', 'string', 'int', 'string', 'string', 'string', 'double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'size', 'value': 'size', 'datatype': 'double'}, {'label': 'ram', 'value': 'ram', 'datatype': 'int'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}]}], 'id': 'jnwwlhxd'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'price', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'seed', 'display_name': 'Random Seed', 'description': 'random seed.', 'mandatory': True, 'datatype': 'int', 'value': 0}, {'name': 'maxDepth', 'display_name': 'Maximum Depth', 'description': 'Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.', 'mandatory': True, 'datatype': 'int', 'value': 5}, {'name': 'maxBins', 'display_name': 'Maximum Bins', 'description': 'Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.', 'mandatory': True, 'datatype': 'int', 'value': 32}, {'name': 'minInstancesPerNode', 'display_name': 'Minimum Instances per Node', 'description': 'Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.', 'mandatory': True, 'datatype': 'int', 'value': 1}, {'name': 'minInfoGain', 'display_name': 'Minimum Information Gain', 'description': 'Minimum information gain for a split to be considered at a tree node.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxMemoryInMB', 'display_name': 'Maximum Memory in MB', 'description': 'Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size.', 'mandatory': True, 'datatype': 'int', 'value': 256}, {'name': 'cacheNodeIds', 'display_name': 'Cache Node Ids', 'description': 'If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval.', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'checkpointInterval', 'display_name': 'Checkpoint Interval', 'description': 'set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext.', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'impurity', 'display_name': 'Impurity', 'description': 'Criterion used for information gain calculation (case-insensitive). Supported options: variance', 'mandatory': True, 'datatype': 'str', 'value': 'variance'}, {'name': 'subsamplingRate', 'display_name': 'Subsampling Rate', 'description': 'Fraction of the training data used for learning each decision tree, in range (0, 1].', 'mandatory': True, 'datatype': 'float', 'value': 1}, {'name': 'numTrees', 'display_name': 'Number of Trees', 'description': 'Number of trees to train (>= 1).', 'mandatory': True, 'datatype': 'int', 'value': 20}, {'name': 'featureSubsetStrategy', 'display_name': 'Feature Subset Strategy', 'description': 'The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].', 'mandatory': True, 'datatype': 'str', 'value': 'auto'}], 'id': 'jnwwm7ra', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'laptop price random forest'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'RegressionEvaluator', 'tempValue': 'Regression Evaluator', 'options': [{'value': 'RegressionEvaluator', 'label': 'Regression Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'rmse', 'tempValue': 'RMSE', 'options': [{'label': 'RMSE', 'value': 'rmse'}, {'label': 'MSE', 'value': 'mse'}, {'label': 'MAE', 'value': 'mae'}]}], 'id': 'jnwwmehg'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T08:34:18.522Z', 'username': '', 'pipeline_group_name': 'laptop price random forest', 'composer_id': 'c44a261c-dce7-11e8-8699-0242ac110002', 'parents_data_id': ['771ad0fc-baff-11e8-bdfa-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'RandomForestRegressor': 'None'}]}, 'estimator': [{'RandomForestRegressor': {'labelCol': 'price', 'featuresCol': 'features', 'predictionCol': 'prediction', 'seed': 0, 'maxDepth': 5, 'maxBins': 32, 'minInstancesPerNode': 1, 'minInfoGain': 0, 'maxMemoryInMB': 256, 'cacheNodeIds': False, 'checkpointInterval': 10, 'impurity': 'variance', 'subsamplingRate': 1, 'numTrees': 20, 'featureSubsetStrategy': 'auto'}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'prediction', 'labelCol': 'price'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464'], 'action': {'adapter': [[{'from': [{'value': 'n1184266632', 'datatype': 'string'}, {'value': 'p112670', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}]}, {'from': [{'value': 'p1872783536', 'datatype': 'string'}], 'to': [{'value': 'price', 'datatype': 'double'}]}]], 'join': 'None'}, 'hash_map': [['p519182448', 'n309474065', 'n1184266632', 'n512503201', 'p98728', 'p102572', 'p112670', 'n1077756671', 'n1010752657', 'n791592328', 'p1872783536']], 'hash_dict': {'p519182448': {'name': 'type', 'datatype': 'string'}, 'n309474065': {'name': 'name', 'datatype': 'string'}, 'n1184266632': {'name': 'size', 'datatype': 'double'}, 'n512503201': {'name': 'screen_resolution', 'datatype': 'string'}, 'p98728': {'name': 'cpu', 'datatype': 'string'}, 'p102572': {'name': 'gpu', 'datatype': 'string'}, 'p112670': {'name': 'ram', 'datatype': 'int'}, 'n1077756671': {'name': 'memory', 'datatype': 'string'}, 'n1010752657': {'name': 'op_sys', 'datatype': 'string'}, 'n791592328': {'name': 'weight', 'datatype': 'string'}, 'p1872783536': {'name': 'price', 'datatype': 'double'}}, 'input_col': ['price', 'features'], 'column_input_dictionary': {'price': {'datatype': 'double'}, 'features': {'datatype': 'vector', 'columns': ['size', 'ram'], 'columns_datatype': ['double', 'int']}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': 'c44a2374-dce7-11e8-8699-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "c44a261c-dce7-11e8-8699-0242ac110002",
    "date": "2018-10-31T08:34:18.522Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/c44a2d24-dce7-11e8-8699-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/c44a2c3e-dce7-11e8-8699-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "c44a2e64-dce7-11e8-8699-0242ac110002",
      "sync": "c44a2dc4-dce7-11e8-8699-0242ac110002"
    },
    "fit_status": "DONE",
    "input_col": [
      "features"
    ],
    "log_error": null,
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": {
      "rmse": 423.41033935546875
    },
    "model_id_output": "c44a2374-dce7-11e8-8699-0242ac110002",
    "output_col": [
      "prediction"
    ],
    "params": [
      "{'cacheNodeIds': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.', 'value': False}, 'checkpointInterval': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext', 'value': 10}, 'featureSubsetStrategy': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].', 'value': 'auto'}, 'featuresCol': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'features column name', 'value': 'features'}, 'impurity': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Criterion used for information gain calculation (case-insensitive). Supported options: variance', 'value': 'variance'}, 'labelCol': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'label column name', 'value': 'price'}, 'maxBins': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.', 'value': 32}, 'maxDepth': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.', 'value': 5}, 'maxMemoryInMB': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Maximum memory in MB allocated to histogram aggregation.', 'value': 256}, 'minInfoGain': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Minimum information gain for a split to be considered at a tree node.', 'value': 0.0}, 'minInstancesPerNode': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Minimum number of instances each child must have after split.  If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.', 'value': 1}, 'numTrees': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Number of trees to train (>= 1)', 'value': 20}, 'predictionCol': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'prediction column name', 'value': 'prediction'}, 'seed': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'random seed', 'value': 0}, 'subsamplingRate': {'parent': 'RandomForestRegressor_4c3b955dc832170de12a', 'doc': 'Fraction of the training data used for learning each decision tree, in range (0, 1].', 'value': 1.0}}"
    ],
    "parents_data_id": [
      "771ad0fc-baff-11e8-bdfa-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": "/ml_studio/model/b5f232f3-18b9-4a5a-b728-b2fcddfed955/c44a2374-dce7-11e8-8699-0242ac110002",
    "pipeline_group_name": "laptop price random forest",
    "running_time": 5,
    "schema_data_output_input": {
      "features": "{\"datatype\": \"vector\", \"columns\": [\"size\", \"ram\"], \"columns_datatype\": [\"double\", \"int\"], \"length\": 2, \"example\": [13.3, 8.0]}"
    },
    "schema_data_output_output": {
      "features": "{\"datatype\": \"vector\", \"columns\": [\"size\", \"ram\"], \"columns_datatype\": [\"double\", \"int\"], \"length\": 2, \"example\": {\"type\": 1, \"values\": [13.3, 8.0], \"size\": 2, \"notes\": \"The example shows the first 5th of the real values.\"}}",
      "prediction": "{\"datatype\": \"double\", \"example\": 1369.2585670760584}"
    },
    "size_data_input": [
      1303,
      2
    ],
    "spark_job_id": "local-1540974867702",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "1824fd26-dce7-11e8-aad2-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - 1300 Laptop Prices', 'Adapter', 'LinearRegression', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464', 'columns': ['type', 'name', 'size', 'screen_resolution', 'cpu', 'gpu', 'ram', 'memory', 'op_sys', 'weight', 'price'], 'data_in_coloumn_types': ['string', 'string', 'double', 'string', 'string', 'string', 'int', 'string', 'string', 'string', 'double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'size', 'value': 'size', 'datatype': 'double'}, {'label': 'ram', 'value': 'ram', 'datatype': 'int'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'datatype_mapping'}], 'id': 'jnwwe722'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'price', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'aggregationDepth', 'display_name': 'Aggregation Depth', 'description': 'suggested depth for treeAggregate (>= 2).', 'mandatory': True, 'datatype': 'int', 'value': 2}, {'name': 'solver', 'display_name': 'Solver Algorithm', 'description': 'The solver algorithm for optimization. Supported options: auto, normal, l-bfgs.', 'mandatory': True, 'datatype': 'str', 'value': 'auto'}, {'name': 'standardization', 'display_name': 'Standardization', 'description': 'whether to standardize the training features before fitting the model.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'fitIntercept', 'display_name': 'Fit Intercept', 'description': 'whether to fit an intercept term.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'elasticNetParam', 'display_name': 'ElasticNet Parameter', 'description': 'the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 100}, {'name': 'regParam', 'display_name': 'Regularization Parameter', 'description': 'regularization parameter (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'tol', 'display_name': 'Tolerance', 'description': 'the convergence tolerance for iterative algorithms (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 1e-06}, {'name': 'loss', 'display_name': 'Loss', 'description': 'The loss function to be optimized. Supported options: squaredError, huber.', 'mandatory': True, 'datatype': 'str', 'value': 'squaredError'}, {'name': 'epsilon', 'display_name': 'Epsilon', 'description': 'The shape parameter to control the amount of robustness. Must be > 1.0. Only valid when loss is huber', 'mandatory': True, 'datatype': 'float', 'value': 1.35}], 'id': 'jnwwekb0', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'laptop price linear regression'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'RegressionEvaluator', 'tempValue': 'Regression Evaluator', 'options': [{'value': 'RegressionEvaluator', 'label': 'Regression Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'rmse', 'tempValue': 'RMSE', 'options': [{'label': 'RMSE', 'value': 'rmse'}, {'label': 'MSE', 'value': 'mse'}, {'label': 'MAE', 'value': 'mae'}]}], 'id': 'jnwwfw05'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T08:29:12.768Z', 'username': '', 'pipeline_group_name': 'laptop price linear regression', 'composer_id': '1824ff06-dce7-11e8-aad2-0242ac110002', 'parents_data_id': ['771ad0fc-baff-11e8-bdfa-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'LinearRegression': 'None'}]}, 'estimator': [{'LinearRegression': {'labelCol': 'price', 'featuresCol': 'features', 'predictionCol': 'prediction', 'aggregationDepth': 2, 'solver': 'auto', 'standardization': True, 'fitIntercept': True, 'elasticNetParam': 0, 'maxIter': 100, 'regParam': 0, 'tol': 1e-06, 'loss': 'squaredError', 'epsilon': 1.35}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'prediction', 'labelCol': 'price'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464'], 'action': {'adapter': [[{'from': [{'value': 'n1184266632', 'datatype': 'string'}, {'value': 'p112670', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}], 'mapping_type': 'datatype_mapping'}, {'from': [{'value': 'p1872783536', 'datatype': 'string'}], 'to': [{'value': 'price', 'datatype': 'double'}], 'mapping_type': 'datatype_mapping'}]], 'join': 'None'}, 'hash_map': [['p519182448', 'n309474065', 'n1184266632', 'n512503201', 'p98728', 'p102572', 'p112670', 'n1077756671', 'n1010752657', 'n791592328', 'p1872783536']], 'hash_dict': {'p519182448': {'name': 'type', 'datatype': 'string'}, 'n309474065': {'name': 'name', 'datatype': 'string'}, 'n1184266632': {'name': 'size', 'datatype': 'double'}, 'n512503201': {'name': 'screen_resolution', 'datatype': 'string'}, 'p98728': {'name': 'cpu', 'datatype': 'string'}, 'p102572': {'name': 'gpu', 'datatype': 'string'}, 'p112670': {'name': 'ram', 'datatype': 'int'}, 'n1077756671': {'name': 'memory', 'datatype': 'string'}, 'n1010752657': {'name': 'op_sys', 'datatype': 'string'}, 'n791592328': {'name': 'weight', 'datatype': 'string'}, 'p1872783536': {'name': 'price', 'datatype': 'double'}}, 'input_col': ['price', 'features'], 'column_input_dictionary': {'price': {'datatype': 'double'}, 'features': {'datatype': 'vector', 'columns': ['size', 'ram'], 'columns_datatype': ['double', 'int']}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': '1824fd26-dce7-11e8-aad2-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "1824ff06-dce7-11e8-aad2-0242ac110002",
    "date": "2018-10-31T08:29:12.768Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/18250794-dce7-11e8-aad2-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/1825069a-dce7-11e8-aad2-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "18250942-dce7-11e8-aad2-0242ac110002",
      "sync": "18250834-dce7-11e8-aad2-0242ac110002"
    },
    "fit_status": "DONE",
    "input_col": [
      "features"
    ],
    "log_error": null,
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": {
      "rmse": 461.0791931152344
    },
    "model_id_output": "1824fd26-dce7-11e8-aad2-0242ac110002",
    "output_col": [
      "prediction"
    ],
    "params": [
      "{'aggregationDepth': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'suggested depth for treeAggregate (>= 2)', 'value': 2}, 'elasticNetParam': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty', 'value': 0.0}, 'epsilon': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'The shape parameter to control the amount of robustness. Must be > 1.0.', 'value': 1.35}, 'featuresCol': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'features column name', 'value': 'features'}, 'fitIntercept': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'whether to fit an intercept term', 'value': True}, 'labelCol': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'label column name', 'value': 'price'}, 'loss': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'The loss function to be optimized. Supported options: squaredError, huber. (Default squaredError)', 'value': 'squaredError'}, 'maxIter': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'maximum number of iterations (>= 0)', 'value': 100}, 'predictionCol': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'prediction column name', 'value': 'prediction'}, 'regParam': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'regularization parameter (>= 0)', 'value': 0.0}, 'solver': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'The solver algorithm for optimization. Supported options: auto, normal, l-bfgs. (Default auto)', 'value': 'auto'}, 'standardization': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'whether to standardize the training features before fitting the model', 'value': True}, 'tol': {'parent': 'LinearRegression_4d10891bf933ac674d4b', 'doc': 'the convergence tolerance for iterative algorithms (>= 0)', 'value': 1e-06}}"
    ],
    "parents_data_id": [
      "771ad0fc-baff-11e8-bdfa-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": "/ml_studio/model/b5f232f3-18b9-4a5a-b728-b2fcddfed955/1824fd26-dce7-11e8-aad2-0242ac110002",
    "pipeline_group_name": "laptop price linear regression",
    "running_time": 4,
    "schema_data_output_input": {
      "features": "{\"datatype\": \"vector\", \"columns\": [\"size\", \"ram\"], \"columns_datatype\": [\"double\", \"int\"], \"length\": 2, \"example\": [13.3, 8.0]}"
    },
    "schema_data_output_output": {
      "features": "{\"datatype\": \"vector\", \"columns\": [\"size\", \"ram\"], \"columns_datatype\": [\"double\", \"int\"], \"length\": 2, \"example\": {\"type\": 1, \"values\": [13.3, 8.0], \"size\": 2, \"notes\": \"The example shows the first 5th of the real values.\"}}",
      "prediction": "{\"datatype\": \"double\", \"example\": 1180.1198254985234}"
    },
    "size_data_input": [
      1303,
      2
    ],
    "spark_job_id": "local-1540974577302",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "6e00cd8e-dce6-11e8-830a-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - toy data', 'Adapter', 'Adapter', 'LogisticRegression', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140', 'columns': ['type', 'person_id', 'count', 'item_count', 'room_count', 'price_try'], 'data_in_coloumn_types': ['string', 'string', 'int', 'int', 'int', 'double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'categorical_mapping', 'tempValue': 'Categorical Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'type', 'value': 'type', 'datatype': 'string'}], 'to': [{'value': 'type1', 'datatype': 'int', 'label': 'type1'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'categorical_mapping'}], 'id': 'jnww82il'}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'count', 'value': 'count', 'datatype': 'int'}, {'label': 'item_count', 'value': 'item_count', 'datatype': 'int'}, {'label': 'room_count', 'value': 'room_count', 'datatype': 'int'}, {'label': 'price_try', 'value': 'price_try', 'datatype': 'double'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'datatype_mapping'}], 'id': 'jnww861r'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'int', 'value': 'type1', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'rawPredictionCol', 'display_name': 'Raw Prediction Column', 'description': 'raw prediction (a.k.a. confidence) column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'rawPrediction'}, {'name': 'probabilityCol', 'display_name': 'Probability Column', 'description': 'Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.', 'mandatory': True, 'datatype': 'vector', 'value': 'probability'}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'aggregationDepth', 'display_name': 'Aggregation Depth', 'description': 'suggested depth for treeAggregate (>= 2).', 'mandatory': True, 'datatype': 'int', 'value': 2}, {'name': 'standardization', 'display_name': 'Standardization', 'description': 'whether to standardize the training features before fitting the model.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'fitIntercept', 'display_name': 'Fit Intercept', 'description': 'whether to fit an intercept term.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'elasticNetParam', 'display_name': 'ElasticNet Mixing Parameter', 'description': 'the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'regParam', 'display_name': 'Regularization Parameter', 'description': 'regularization parameter (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 0.01}, {'name': 'tol', 'display_name': 'Tolerance', 'description': 'the convergence tolerance for iterative algorithms (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 1e-06}, {'name': 'threshold', 'display_name': 'Threshold', 'description': 'Threshold in binary classification prediction, in range [0, 1]. If threshold and thresholds are both set, they must match.e.g. if threshold is p, then thresholds must be equal to [1-p, p].', 'mandatory': True, 'datatype': 'float', 'value': 0.5}, {'name': 'family', 'display_name': 'Family', 'description': 'The name of family which is a description of the label distribution to be used in the model. Supported options: auto, binomial, multinomial', 'mandatory': True, 'datatype': 'str', 'value': 'auto'}], 'id': 'jnww8dt6', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'logistic regression toy'}, {'name': 'type', 'display_name': 'Type', 'value': 'TrainValidationSplit', 'tempValue': 'Train Validation Split', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'MulticlassClassificationEvaluator', 'tempValue': 'Multiclass Classification Evaluator', 'options': [{'value': 'MulticlassClassificationEvaluator', 'label': 'Multiclass Classification Evaluator'}]}, {'name': 'trainRatio', 'display_name': 'Train Ratio', 'value': 0.8}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'f1', 'tempValue': 'F1', 'options': [{'label': 'F1', 'value': 'f1'}, {'label': 'Weighted Prediction', 'value': 'weightedPrecision'}, {'label': 'Weighted Recall', 'value': 'weightedRecall'}, {'label': 'Accuracy', 'value': 'accuracy'}]}], 'id': 'jnww8jxc'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T08:24:43.798Z', 'username': '', 'pipeline_group_name': 'logistic regression toy', 'composer_id': '6e00cfbe-dce6-11e8-830a-0242ac110002', 'parents_data_id': ['e2aecb90-579a-4b2f-aae1-ece07385f4d3'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'TrainValidationSplit', 'trainRatio': 0.8, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'LogisticRegression': 'None'}]}, 'estimator': [{'LogisticRegression': {'labelCol': 'type1', 'featuresCol': 'features', 'rawPredictionCol': 'rawPrediction', 'probabilityCol': 'probability', 'predictionCol': 'prediction', 'aggregationDepth': 2, 'standardization': True, 'fitIntercept': True, 'elasticNetParam': 0, 'maxIter': 10, 'regParam': 0.01, 'tol': 1e-06, 'threshold': 0.5, 'family': 'auto'}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'f1', 'predictionCol': 'prediction', 'labelCol': 'type1'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140'], 'action': {'adapter': [[{'from': [{'value': 'p49', 'datatype': 'string'}], 'to': [{'value': 'type1', 'datatype': 'int'}], 'mapping_type': 'categorical_mapping'}], [{'from': [{'value': 'p51', 'datatype': 'string'}, {'value': 'p52', 'datatype': 'string'}, {'value': 'p53', 'datatype': 'string'}, {'value': 'p54', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}], 'mapping_type': 'datatype_mapping'}]], 'join': 'None'}, 'hash_map': [['p49', 'p50', 'p51', 'p52', 'p53', 'p54']], 'hash_dict': {'p49': {'name': 'type', 'datatype': 'string'}, 'p50': {'name': 'person_id', 'datatype': 'string'}, 'p51': {'name': 'count', 'datatype': 'int'}, 'p52': {'name': 'item_count', 'datatype': 'int'}, 'p53': {'name': 'room_count', 'datatype': 'int'}, 'p54': {'name': 'price_try', 'datatype': 'double'}}, 'input_col': ['type1', 'features'], 'column_input_dictionary': {'type1': {'datatype': 'int', 'columns': 'type'}, 'features': {'datatype': 'vector', 'columns': ['count', 'item_count', 'room_count', 'price_try'], 'columns_datatype': ['int', 'int', 'int', 'double']}}}, 'output_col': 'all', 'numFolds': 1, 'fit_id': '6e00cd8e-dce6-11e8-830a-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "6e00cfbe-dce6-11e8-830a-0242ac110002",
    "date": "2018-10-31T08:24:43.798Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/6e00dacc-dce6-11e8-830a-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/6e00d928-dce6-11e8-830a-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "6e00dc70-dce6-11e8-830a-0242ac110002",
      "sync": "6e00dbbc-dce6-11e8-830a-0242ac110002"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "An error occurred while calling o414.load.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 8.0 failed 1 times, most recent failure: Lost task 0.0 in stage 8.0 (TID 8, localhost, executor driver): java.io.IOException: Could not read footer for file: FileStatus{path=hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet; isDirectory=false; length=0; replication=0; blocksize=0; modification_time=0; access_time=0; owner=; group=; permission=rw-rw-rw-; isSymlink=false}\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:526)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:513)\n\tat scala.collection.parallel.AugmentedIterableIterator$class.flatmap2combiner(RemainsIterator.scala:132)\n\tat scala.collection.parallel.immutable.ParVector$ParVectorIterator.flatmap2combiner(ParVector.scala:62)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\n\tat scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\n\tat scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\n\tat scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\n\tat scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: java.lang.RuntimeException: hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet is not a Parquet file (too small)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:466)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:445)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:421)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:519)\n\t... 32 more\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1602)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1590)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1589)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1589)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:831)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1823)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1772)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1761)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:642)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2034)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2055)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2074)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2099)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:939)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:938)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$.mergeSchemasInParallel(ParquetFileFormat.scala:611)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat.inferSchema(ParquetFileFormat.scala:241)\n\tat org.apache.spark.sql.execution.datasources.DataSource$$anonfun$8.apply(DataSource.scala:202)\n\tat org.apache.spark.sql.execution.datasources.DataSource$$anonfun$8.apply(DataSource.scala:202)\n\tat scala.Option.orElse(Option.scala:289)\n\tat org.apache.spark.sql.execution.datasources.DataSource.getOrInferFileFormatSchema(DataSource.scala:201)\n\tat org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:392)\n\tat org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:239)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:227)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:174)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: Could not read footer for file: FileStatus{path=hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet; isDirectory=false; length=0; replication=0; blocksize=0; modification_time=0; access_time=0; owner=; group=; permission=rw-rw-rw-; isSymlink=false}\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:526)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:513)\n\tat scala.collection.parallel.AugmentedIterableIterator$class.flatmap2combiner(RemainsIterator.scala:132)\n\tat scala.collection.parallel.immutable.ParVector$ParVectorIterator.flatmap2combiner(ParVector.scala:62)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\n\tat scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\n\tat scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\n\tat scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\n\tat scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: java.lang.RuntimeException: hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet is not a Parquet file (too small)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:466)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:445)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:421)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:519)\n\t... 32 more\n",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "e2aecb90-579a-4b2f-aae1-ece07385f4d3"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "logistic regression toy",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1540974292924",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "ce50ed82-dce5-11e8-afee-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - toy data', 'Adapter', 'Adapter', 'RandomForestClassifier', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140', 'columns': ['type', 'person_id', 'count', 'item_count', 'room_count', 'price_try'], 'data_in_coloumn_types': ['string', 'string', 'int', 'int', 'int', 'double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'categorical_mapping', 'tempValue': 'Categorical Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'type', 'value': 'type', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'int', 'label': 'label'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'categorical_mapping'}], 'id': 'jnwvyvdo'}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'count', 'value': 'count', 'datatype': 'int'}, {'label': 'item_count', 'value': 'item_count', 'datatype': 'int'}, {'label': 'room_count', 'value': 'room_count', 'datatype': 'int'}, {'label': 'price_try', 'value': 'price_try', 'datatype': 'double'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'datatype_mapping'}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'label', 'value': 'label', 'datatype': 'int'}], 'to': [{'value': 'label2', 'datatype': 'double', 'label': 'label2'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'datatype_mapping'}], 'id': 'jnwvzla6'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'int', 'value': 'label', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'probabilityCol', 'display_name': 'Probability Column', 'description': 'Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.', 'mandatory': True, 'datatype': 'vector', 'value': 'probability'}, {'name': 'rawPredictionCol', 'display_name': 'Raw Prediction Column', 'description': 'raw prediction (a.k.a. confidence) column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'rawPrediction'}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'seed', 'display_name': 'Random Seed', 'description': 'random seed.', 'mandatory': True, 'datatype': 'int', 'value': 0}, {'name': 'maxDepth', 'display_name': 'Maximum Depth', 'description': 'Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.', 'mandatory': True, 'datatype': 'int', 'value': 5}, {'name': 'maxBins', 'display_name': 'Maximum Bins', 'description': 'Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.', 'mandatory': True, 'datatype': 'int', 'value': 32}, {'name': 'minInstancesPerNode', 'display_name': 'Minimum Instances per Node', 'description': 'Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.', 'mandatory': True, 'datatype': 'int', 'value': 1}, {'name': 'minInfoGain', 'display_name': 'Minimum Information Gain', 'description': 'Minimum information gain for a split to be considered at a tree node.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxMemoryInMB', 'display_name': 'Maximum Memory in MB', 'description': 'Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size.', 'mandatory': True, 'datatype': 'int', 'value': 256}, {'name': 'cacheNodeIds', 'display_name': 'Cache Node Ids', 'description': 'If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval.', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'checkpointInterval', 'display_name': 'Checkpoint Interval', 'description': 'set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext.', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'impurity', 'display_name': 'Impurity', 'description': 'Criterion used for information gain calculation (case-insensitive). Supported options: entropy, gini', 'mandatory': True, 'datatype': 'str', 'value': 'gini'}, {'name': 'numTrees', 'display_name': 'Number of Trees', 'description': 'Number of trees to train (>= 1).', 'mandatory': True, 'datatype': 'int', 'value': 20}, {'name': 'featureSubsetStrategy', 'display_name': 'Feature Subset Strategy', 'description': 'The number of features to consider for splits at each tree node. Supported options: auto, all, onethird, sqrt, log2, (0.0-1.0], [1-n].', 'mandatory': True, 'datatype': 'str', 'value': 'auto'}, {'name': 'subsamplingRate', 'display_name': 'Subsampling Rate', 'description': 'Fraction of the training data used for learning each decision tree, in range (0, 1].', 'mandatory': True, 'datatype': 'float', 'value': 1}], 'id': 'jnww1c4k', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'random forest toy'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'MulticlassClassificationEvaluator', 'tempValue': 'Multiclass Classification Evaluator', 'options': [{'value': 'MulticlassClassificationEvaluator', 'label': 'Multiclass Classification Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'accuracy', 'tempValue': 'Accuracy', 'options': [{'label': 'F1', 'value': 'f1'}, {'label': 'Weighted Prediction', 'value': 'weightedPrecision'}, {'label': 'Weighted Recall', 'value': 'weightedRecall'}, {'label': 'Accuracy', 'value': 'accuracy'}]}], 'id': 'jnww2rx9'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T08:20:14.880Z', 'username': '', 'pipeline_group_name': 'random forest toy', 'composer_id': 'ce50efda-dce5-11e8-afee-0242ac110002', 'parents_data_id': ['e2aecb90-579a-4b2f-aae1-ece07385f4d3'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'RandomForestClassifier': 'None'}]}, 'estimator': [{'RandomForestClassifier': {'labelCol': 'label', 'featuresCol': 'features', 'probabilityCol': 'probability', 'rawPredictionCol': 'rawPrediction', 'predictionCol': 'prediction', 'seed': 0, 'maxDepth': 5, 'maxBins': 32, 'minInstancesPerNode': 1, 'minInfoGain': 0, 'maxMemoryInMB': 256, 'cacheNodeIds': False, 'checkpointInterval': 10, 'impurity': 'gini', 'numTrees': 20, 'featureSubsetStrategy': 'auto', 'subsamplingRate': 1}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'accuracy', 'predictionCol': 'prediction', 'labelCol': 'label'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140'], 'action': {'adapter': [[{'from': [{'value': 'p49', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'int'}], 'mapping_type': 'categorical_mapping'}], [{'from': [{'value': 'p51', 'datatype': 'string'}, {'value': 'p52', 'datatype': 'string'}, {'value': 'p53', 'datatype': 'string'}, {'value': 'p54', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}], 'mapping_type': 'datatype_mapping'}, {'from': [{'value': 'label', 'datatype': 'int'}], 'to': [{'value': 'label2', 'datatype': 'double'}], 'mapping_type': 'datatype_mapping'}]], 'join': 'None'}, 'hash_map': [['p49', 'p50', 'p51', 'p52', 'p53', 'p54']], 'hash_dict': {'p49': {'name': 'type', 'datatype': 'string'}, 'p50': {'name': 'person_id', 'datatype': 'string'}, 'p51': {'name': 'count', 'datatype': 'int'}, 'p52': {'name': 'item_count', 'datatype': 'int'}, 'p53': {'name': 'room_count', 'datatype': 'int'}, 'p54': {'name': 'price_try', 'datatype': 'double'}}, 'input_col': ['label', 'features'], 'column_input_dictionary': {'label': {'datatype': 'int', 'columns': 'type'}, 'features': {'datatype': 'vector', 'columns': ['count', 'item_count', 'room_count', 'price_try'], 'columns_datatype': ['int', 'int', 'int', 'double']}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': 'ce50ed82-dce5-11e8-afee-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "ce50efda-dce5-11e8-afee-0242ac110002",
    "date": "2018-10-31T08:20:14.880Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/ce50faac-dce5-11e8-afee-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/ce50f91c-dce5-11e8-afee-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "ce50fc82-dce5-11e8-afee-0242ac110002",
      "sync": "ce50fba6-dce5-11e8-afee-0242ac110002"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "An error occurred while calling o414.load.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 8.0 failed 1 times, most recent failure: Lost task 0.0 in stage 8.0 (TID 8, localhost, executor driver): java.io.IOException: Could not read footer for file: FileStatus{path=hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet; isDirectory=false; length=0; replication=0; blocksize=0; modification_time=0; access_time=0; owner=; group=; permission=rw-rw-rw-; isSymlink=false}\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:526)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:513)\n\tat scala.collection.parallel.AugmentedIterableIterator$class.flatmap2combiner(RemainsIterator.scala:132)\n\tat scala.collection.parallel.immutable.ParVector$ParVectorIterator.flatmap2combiner(ParVector.scala:62)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\n\tat scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\n\tat scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\n\tat scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\n\tat scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: java.lang.RuntimeException: hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet is not a Parquet file (too small)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:466)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:445)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:421)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:519)\n\t... 32 more\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1602)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1590)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1589)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1589)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:831)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:831)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1823)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1772)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1761)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:642)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2034)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2055)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2074)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2099)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:939)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:938)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$.mergeSchemasInParallel(ParquetFileFormat.scala:611)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat.inferSchema(ParquetFileFormat.scala:241)\n\tat org.apache.spark.sql.execution.datasources.DataSource$$anonfun$8.apply(DataSource.scala:202)\n\tat org.apache.spark.sql.execution.datasources.DataSource$$anonfun$8.apply(DataSource.scala:202)\n\tat scala.Option.orElse(Option.scala:289)\n\tat org.apache.spark.sql.execution.datasources.DataSource.getOrInferFileFormatSchema(DataSource.scala:201)\n\tat org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:392)\n\tat org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:239)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:227)\n\tat org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:174)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.IOException: Could not read footer for file: FileStatus{path=hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet; isDirectory=false; length=0; replication=0; blocksize=0; modification_time=0; access_time=0; owner=; group=; permission=rw-rw-rw-; isSymlink=false}\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:526)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:513)\n\tat scala.collection.parallel.AugmentedIterableIterator$class.flatmap2combiner(RemainsIterator.scala:132)\n\tat scala.collection.parallel.immutable.ParVector$ParVectorIterator.flatmap2combiner(ParVector.scala:62)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.leaf(ParIterableLike.scala:1072)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$FlatMap.tryLeaf(ParIterableLike.scala:1068)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doJoin(ForkJoinTask.java:341)\n\tat scala.concurrent.forkjoin.ForkJoinTask.join(ForkJoinTask.java:673)\n\tat scala.collection.parallel.ForkJoinTasks$WrappedTask$class.sync(Tasks.scala:378)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.sync(Tasks.scala:443)\n\tat scala.collection.parallel.ForkJoinTasks$class.executeAndWaitResult(Tasks.scala:426)\n\tat scala.collection.parallel.ForkJoinTaskSupport.executeAndWaitResult(TaskSupport.scala:56)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.leaf(ParIterableLike.scala:958)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply$mcV$sp(Tasks.scala:49)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$$anonfun$tryLeaf$1.apply(Tasks.scala:48)\n\tat scala.collection.parallel.Task$class.tryLeaf(Tasks.scala:51)\n\tat scala.collection.parallel.ParIterableLike$ResultMapping.tryLeaf(ParIterableLike.scala:953)\n\tat scala.collection.parallel.AdaptiveWorkStealingTasks$WrappedTask$class.compute(Tasks.scala:152)\n\tat scala.collection.parallel.AdaptiveWorkStealingForkJoinTasks$WrappedTask.compute(Tasks.scala:443)\n\tat scala.concurrent.forkjoin.RecursiveAction.exec(RecursiveAction.java:160)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: java.lang.RuntimeException: hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/e2aecb90-579a-4b2f-aae1-ece07385f4d3/1/1540973686140/e2aecb90-579a-4b2f-aae1-ece07385f4d3.parquet is not a Parquet file (too small)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:466)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:445)\n\tat org.apache.parquet.hadoop.ParquetFileReader.readFooter(ParquetFileReader.java:421)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat$$anonfun$readParquetFootersInParallel$1.apply(ParquetFileFormat.scala:519)\n\t... 32 more\n",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "e2aecb90-579a-4b2f-aae1-ece07385f4d3"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "random forest toy",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1540974024834",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "caf745a0-dcd6-11e8-ad42-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Women Clothing Review', 'Adapter', 'CountVectorizer', 'GBTRegressor', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/55a61de9-be4e-11e8-8f25-08d40cec20c9/1/1537752599126', 'columns': ['title_review', 'desc_review', 'rating', 'status_recommended', 'positive_feedback', 'div_name', 'dept_name', 'product_type'], 'data_in_coloumn_types': ['string', 'string', 'double', 'int', 'int', 'string', 'string', 'string']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 1}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'desc_review', 'value': 'desc_review', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'array<string>', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'datatype_mapping'}], 'id': 'jnws85m5'}, {'input': [{'name': 'inputCol', 'display_name': 'Input Column', 'description': 'input column name.', 'mandatory': True, 'datatype': 'array<string>', 'value': 'features', 'error': ''}], 'output': [{'name': 'outputCol', 'display_name': 'Output Column', 'description': 'output column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'count_vectorizer_output'}], 'params': [{'name': 'minTF', 'display_name': 'Minimum Term Frequency', 'description': \"Filter to ignore rare words in a document. For each document, terms with frequency/count less than the given threshold are ignored. If this is an integer >= 1, then this specifies a count (of times the term must appear in the document); if this is a double in [0,1), then this specifies a fraction (out of the document's token count). Note that the parameter is only used in transform of CountVectorizerModel and does not affect fitting. Default 1.0\", 'mandatory': True, 'datatype': 'float', 'value': 1}, {'name': 'minDF', 'display_name': 'Minimum Document Frequency', 'description': 'Specifies the minimum number of different documents a term must appear in to be included in the vocabulary. If this is an integer >= 1, this specifies the number of documents the term must appear in; if this is a double in [0,1), then this specifies the fraction of documents. Default 1.0', 'mandatory': True, 'datatype': 'float', 'value': 1}, {'name': 'vocabSize', 'display_name': 'Vocabulary Size', 'description': 'Maximum size of the vocabulary. Default 1 << 18.', 'mandatory': True, 'datatype': 'int', 'value': 262144}, {'name': 'binary', 'display_name': 'Binary', 'description': 'Binary toggle to control the output vector values. If True, all nonzero counts (after minTF filter applied) are set to 1. This is useful for discrete probabilistic models that model binary events rather than integer counts. Default False', 'mandatory': True, 'datatype': 'boolean', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}], 'id': 'jnws8zr5', 'type': 'algorithm'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'rating', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'count_vectorizer_output', 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'seed', 'display_name': 'Random Seed', 'description': 'random seed.', 'mandatory': True, 'datatype': 'int', 'value': 0}, {'name': 'maxDepth', 'display_name': 'Maximum Depth', 'description': 'Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.', 'mandatory': True, 'datatype': 'int', 'value': 5}, {'name': 'maxBins', 'display_name': 'Maximum Bins', 'description': 'Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.', 'mandatory': True, 'datatype': 'int', 'value': 32}, {'name': 'minInstancesPerNode', 'display_name': 'Minimum Instances per Node', 'description': 'Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.', 'mandatory': True, 'datatype': 'int', 'value': 1}, {'name': 'minInfoGain', 'display_name': 'Minimum Information Gain', 'description': 'Minimum information gain for a split to be considered at a tree node.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxMemoryInMB', 'display_name': 'Maximum Memory in MB', 'description': 'Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size.', 'mandatory': True, 'datatype': 'int', 'value': 256}, {'name': 'cacheNodeIds', 'display_name': 'Cache Node Ids', 'description': 'If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval.', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'subsamplingRate', 'display_name': 'Subsampling Rate', 'description': 'Fraction of the training data used for learning each decision tree, in range (0, 1].', 'mandatory': True, 'datatype': 'float', 'value': 1}, {'name': 'checkpointInterval', 'display_name': 'Checkpoint Interval', 'description': 'set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext.', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'lossType', 'display_name': 'Loss Type', 'description': 'Loss function which GBT tries to minimize (case-insensitive). Supported options: squared, absolute', 'mandatory': True, 'datatype': 'str', 'value': 'squared'}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 20}, {'name': 'stepSize', 'display_name': 'Step Size', 'description': 'Step size (a.k.a. learning rate) in interval (0, 1] for shrinking the contribution of each estimator.', 'mandatory': True, 'datatype': 'float', 'value': 0.1}], 'id': 'jnws9kmp', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'test text (women clothing review) 2'}, {'name': 'type', 'display_name': 'Type', 'value': 'GeneralPipeline', 'tempValue': 'General Pipeline', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}], 'id': 'jnwsa1s8'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T06:32:48.262Z', 'username': '', 'pipeline_group_name': 'test text (women clothing review) 2', 'composer_id': 'caf7478a-dcd6-11e8-ad42-0242ac110002', 'parents_data_id': ['55a61de9-be4e-11e8-8f25-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'GeneralPipeline', 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'CountVectorizer': 'None'}, {'GBTRegressor': 'None'}]}, 'estimator': [{'CountVectorizer': {'inputCol': 'features', 'outputCol': 'count_vectorizer_output', 'minTF': 1, 'minDF': 1, 'vocabSize': 262144, 'binary': False}}, {'GBTRegressor': {'labelCol': 'rating', 'featuresCol': 'count_vectorizer_output', 'predictionCol': 'prediction', 'seed': 0, 'maxDepth': 5, 'maxBins': 32, 'minInstancesPerNode': 1, 'minInfoGain': 0, 'maxMemoryInMB': 256, 'cacheNodeIds': False, 'subsamplingRate': 1, 'checkpointInterval': 10, 'lossType': 'squared', 'maxIter': 20, 'stepSize': 0.1}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'f1'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/55a61de9-be4e-11e8-8f25-08d40cec20c9/1/1537752599126'], 'action': {'adapter': [[{'from': [{'value': 'n934348968', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'array<string>'}], 'mapping_type': 'datatype_mapping'}, {'from': [{'value': 'n938102371', 'datatype': 'string'}], 'to': [{'value': 'rating', 'datatype': 'double'}], 'mapping_type': 'datatype_mapping'}]], 'join': 'None'}, 'hash_map': [['p110371416', 'n934348968', 'n938102371', 'n1723531269', 'n1230001445', 'p228943581', 'p473903960', 'n290474766']], 'hash_dict': {'p110371416': {'name': 'title_review', 'datatype': 'string'}, 'n934348968': {'name': 'desc_review', 'datatype': 'string'}, 'n938102371': {'name': 'rating', 'datatype': 'double'}, 'n1723531269': {'name': 'status_recommended', 'datatype': 'int'}, 'n1230001445': {'name': 'positive_feedback', 'datatype': 'int'}, 'p228943581': {'name': 'div_name', 'datatype': 'string'}, 'p473903960': {'name': 'dept_name', 'datatype': 'string'}, 'n290474766': {'name': 'product_type', 'datatype': 'string'}}, 'input_col': ['features', 'rating'], 'column_input_dictionary': {'features': {'datatype': 'array<string>', 'columns': 'desc_review'}, 'rating': {'datatype': 'double'}}}, 'output_col': 'all', 'numFolds': 1, 'trainRatio': 1, 'fit_id': 'caf745a0-dcd6-11e8-ad42-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "caf7478a-dcd6-11e8-ad42-0242ac110002",
    "date": "2018-10-31T06:32:48.262Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/caf74eb0-dcd6-11e8-ad42-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/caf74dac-dcd6-11e8-ad42-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "caf74ff0-dcd6-11e8-ad42-0242ac110002",
      "sync": "caf74f5a-dcd6-11e8-ad42-0242ac110002"
    },
    "fit_status": "IN PROGRESS",
    "input_col": null,
    "log_error": null,
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": "caf745a0-dcd6-11e8-ad42-0242ac110002",
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "55a61de9-be4e-11e8-8f25-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "test text (women clothing review) 2",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "c5666f40-dcd5-11e8-b64e-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-31T06:25:29.474Z', 'username': '', 'pipeline_group_name': 'TESTER DEPLOY STAGING 4', 'composer_id': 'c566713e-dcd5-11e8-b64e-0242ac110002', 'parents_data_id': ['55a61de9-be4e-11e8-8f25-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'HashingTF': 'None'}, {'RandomForestRegressor': 'None'}]}, 'estimator': [{'HashingTF': {'inputCol': 'features', 'outputCol': 'hashing_tf_output', 'binary': False, 'numFeatures': 262144}}, {'RandomForestRegressor': {'labelCol': 'rating', 'featuresCol': 'hashing_tf_output', 'predictionCol': 'prediction', 'seed': 0, 'maxDepth': 5, 'maxBins': 32, 'minInstancesPerNode': 1, 'minInfoGain': 0, 'maxMemoryInMB': 256, 'cacheNodeIds': False, 'checkpointInterval': 10, 'impurity': 'variance', 'subsamplingRate': 1, 'numTrees': 20, 'featureSubsetStrategy': 'auto'}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'prediction', 'labelCol': 'rating'}}, 'data': {'path': ['hdfs://159.65.13.90:9001/laniakea/asset/dataset/raw/55a61de9-be4e-11e8-8f25-08d40cec20c9/1/1537752599126'], 'action': {'adapter': [[{'from': [{'value': 'n934348968', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'array<string>'}]}, {'from': [{'value': 'n938102371', 'datatype': 'string'}], 'to': [{'value': 'rating', 'datatype': 'double'}]}]], 'join': 'None'}, 'hash_map': [['p110371416', 'n934348968', 'n938102371', 'n1723531269', 'n1230001445', 'p228943581', 'p473903960', 'n290474766']], 'hash_dict': {'p110371416': {'name': 'title_review', 'datatype': 'string'}, 'n934348968': {'name': 'desc_review', 'datatype': 'string'}, 'n938102371': {'name': 'rating', 'datatype': 'double'}, 'n1723531269': {'name': 'status_recommended', 'datatype': 'int'}, 'n1230001445': {'name': 'positive_feedback', 'datatype': 'int'}, 'p228943581': {'name': 'div_name', 'datatype': 'string'}, 'p473903960': {'name': 'dept_name', 'datatype': 'string'}, 'n290474766': {'name': 'product_type', 'datatype': 'string'}}, 'input_col': ['features', 'rating'], 'column_input_dictionary': {'features': {'datatype': 'array<string>', 'columns': 'desc_review'}, 'rating': {'datatype': 'double'}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': 'c5666f40-dcd5-11e8-b64e-0242ac110002', 'spark_job_version': '1.1.1'}",
    "composer_id": "c566713e-dcd5-11e8-b64e-0242ac110002",
    "date": "2018-10-31T06:25:29.474Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/c5667922-dcd5-11e8-b64e-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/c566783c-dcd5-11e8-b64e-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "c5667a94-dcd5-11e8-b64e-0242ac110002",
      "sync": "c56679c2-dcd5-11e8-b64e-0242ac110002"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "An error occurred while trying to connect to the Java server (127.0.0.1:35676)",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "55a61de9-be4e-11e8-8f25-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "TESTER DEPLOY STAGING 4",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1542787790153",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "1079960e-d3aa-11e8-b1a3-0242ac110006",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - 1300 Laptop Prices', 'Adapter', 'Adapter', 'DecisionTreeRegressor', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464', 'columns': ['type', 'name', 'size', 'screen_resolution', 'cpu', 'gpu', 'ram', 'memory', 'op_sys', 'weight', 'price'], 'data_in_coloumn_types': ['string', 'string', 'double', 'string', 'string', 'string', 'int', 'string', 'string', 'string', 'double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'categorical_mapping', 'tempValue': 'Categorical Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'cpu', 'value': 'cpu', 'datatype': 'string'}], 'to': [{'value': 'cpu_code', 'datatype': 'int', 'label': 'cpu_code'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'categorical_mapping'}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'screen_resolution', 'value': 'screen_resolution', 'datatype': 'string'}], 'to': [{'value': 'screen_code', 'datatype': 'int', 'label': 'screen_code'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}], 'mapping_type': 'categorical_mapping'}], 'id': 'jng3k0xe'}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'price', 'value': 'price', 'datatype': 'double'}], 'to': [{'value': 'label', 'datatype': 'double', 'label': 'label'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'cpu_code', 'value': 'cpu_code', 'datatype': 'int'}, {'label': 'screen_code', 'value': 'screen_code', 'datatype': 'int'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}, {'label': 'string', 'value': 'string'}, {'label': 'array<string>', 'value': 'array<string>'}]}], 'id': 'jng3kadn'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'label', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}, {'name': 'varianceCol', 'display_name': 'Variance Column', 'description': 'column name for the biased sample variance of prediction.', 'mandatory': False, 'datatype': 'double', 'value': 'variance'}], 'params': [{'name': 'seed', 'display_name': 'Random Seed', 'description': 'random seed.', 'mandatory': True, 'datatype': 'int', 'value': 0}, {'name': 'maxDepth', 'display_name': 'Maximum Depth', 'description': 'Maximum depth of the tree. (>= 0) E.g., depth 0 means 1 leaf node; depth 1 means 1 internal node + 2 leaf nodes.', 'mandatory': True, 'datatype': 'int', 'value': 5}, {'name': 'maxBins', 'display_name': 'Maximum Bins', 'description': 'Max number of bins for discretizing continuous features.  Must be >=2 and >= number of categories for any categorical feature.', 'mandatory': True, 'datatype': 'int', 'value': 32}, {'name': 'minInstancesPerNode', 'display_name': 'Minimum Instances per Node', 'description': 'Minimum number of instances each child must have after split. If a split causes the left or right child to have fewer than minInstancesPerNode, the split will be discarded as invalid. Should be >= 1.', 'mandatory': True, 'datatype': 'int', 'value': 1}, {'name': 'minInfoGain', 'display_name': 'Minimum Information Gain', 'description': 'Minimum information gain for a split to be considered at a tree node.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxMemoryInMB', 'display_name': 'Maximum Memory in MB', 'description': 'Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size.', 'mandatory': True, 'datatype': 'int', 'value': 256}, {'name': 'cacheNodeIds', 'display_name': 'Cache Node Ids', 'description': 'If false, the algorithm will pass trees to executors to match instances with nodes. If true, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Users can set how often should the cache be checkpointed or disable it by setting checkpointInterval.', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'checkpointInterval', 'display_name': 'Checkpoint Interval', 'description': 'set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations. Note: this setting will be ignored if the checkpoint directory is not set in the SparkContext.', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'impurity', 'display_name': 'Impurity', 'description': 'Criterion used for information gain calculation (case-insensitive). Supported options: variance', 'mandatory': True, 'datatype': 'str', 'value': 'variance'}], 'id': 'jng3ko9p', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'Tes Model'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'RegressionEvaluator', 'tempValue': 'Regression Evaluator', 'options': [{'value': 'RegressionEvaluator', 'label': 'Regression Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 5}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'rmse', 'tempValue': 'RMSE', 'options': [{'label': 'RMSE', 'value': 'rmse'}, {'label': 'MSE', 'value': 'mse'}, {'label': 'MAE', 'value': 'mae'}]}], 'id': 'jng3kugg'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-19T14:18:58.845Z', 'username': '', 'pipeline_group_name': 'Tes Model', 'composer_id': '10799924-d3aa-11e8-b1a3-0242ac110006', 'parents_data_id': ['771ad0fc-baff-11e8-bdfa-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 5, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'DecisionTreeRegressor': 'None'}]}, 'estimator': [{'DecisionTreeRegressor': {'labelCol': 'label', 'featuresCol': 'features', 'predictionCol': 'prediction', 'varianceCol': 'variance', 'seed': 0, 'maxDepth': 5, 'maxBins': 32, 'minInstancesPerNode': 1, 'minInfoGain': 0, 'maxMemoryInMB': 256, 'cacheNodeIds': False, 'checkpointInterval': 10, 'impurity': 'variance'}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'prediction', 'labelCol': 'label'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/raw/771ad0fc-baff-11e8-bdfa-08d40cec20c9/1/1537264662464'], 'action': {'adapter': [[{'from': [{'value': 'p98728', 'datatype': 'string'}], 'to': [{'value': 'cpu_code', 'datatype': 'int'}], 'mapping_type': 'categorical_mapping'}, {'from': [{'value': 'n512503201', 'datatype': 'string'}], 'to': [{'value': 'screen_code', 'datatype': 'int'}], 'mapping_type': 'categorical_mapping'}], [{'from': [{'value': 'p1872783536', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'double'}]}, {'from': [{'value': 'cpu_code', 'datatype': 'int'}, {'value': 'screen_code', 'datatype': 'int'}], 'to': [{'value': 'features', 'datatype': 'vector'}]}]], 'join': 'None'}, 'hash_map': [['p519182448', 'n309474065', 'n1184266632', 'n512503201', 'p98728', 'p102572', 'p112670', 'n1077756671', 'n1010752657', 'n791592328', 'p1872783536']], 'hash_dict': {'p519182448': {'name': 'type', 'datatype': 'string'}, 'n309474065': {'name': 'name', 'datatype': 'string'}, 'n1184266632': {'name': 'size', 'datatype': 'double'}, 'n512503201': {'name': 'screen_resolution', 'datatype': 'string'}, 'p98728': {'name': 'cpu', 'datatype': 'string'}, 'p102572': {'name': 'gpu', 'datatype': 'string'}, 'p112670': {'name': 'ram', 'datatype': 'int'}, 'n1077756671': {'name': 'memory', 'datatype': 'string'}, 'n1010752657': {'name': 'op_sys', 'datatype': 'string'}, 'n791592328': {'name': 'weight', 'datatype': 'string'}, 'p1872783536': {'name': 'price', 'datatype': 'double'}}, 'input_col': ['label', 'features'], 'column_input_dictionary': {'label': {'datatype': 'double', 'columns': 'price'}, 'features': {'datatype': 'vector', 'columns': ['cpu_code', 'screen_code'], 'columns_datatype': ['int', 'int']}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': '1079960e-d3aa-11e8-b1a3-0242ac110006', 'spark_job_version': '1.1.1'}",
    "composer_id": "10799924-d3aa-11e8-b1a3-0242ac110006",
    "date": "2018-10-19T14:18:58.845Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/1090b730-d3aa-11e8-b1a3-0242ac110006",
      "sync": "https://api.volantis.io/v1/predict/sync/model/1090b550-d3aa-11e8-b1a3-0242ac110006"
    },
    "endpoints_service_id": {
      "async": "1090b88e-d3aa-11e8-b1a3-0242ac110006",
      "sync": "1090b7ee-d3aa-11e8-b1a3-0242ac110006"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "An error occurred while calling o3767.save.\n: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ipc.StandbyException): Operation category READ is not supported in state standby. Visit https://s.apache.org/sbnn-error\n\tat org.apache.hadoop.hdfs.server.namenode.ha.StandbyState.checkOperation(StandbyState.java:88)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNode$NameNodeHAContext.checkOperation(NameNode.java:1835)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.checkOperation(FSNamesystem.java:1450)\n\tat org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getFileInfo(FSNamesystem.java:4271)\n\tat org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.getFileInfo(NameNodeRpcServer.java:901)\n\tat org.apache.hadoop.hdfs.server.namenode.AuthorizationProviderProxyClientProtocol.getFileInfo(AuthorizationProviderProxyClientProtocol.java:528)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.getFileInfo(ClientNamenodeProtocolServerSideTranslatorPB.java:839)\n\tat org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.callBlockingMethod(ClientNamenodeProtocolProtos.java)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine.java:617)\n\tat org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1073)\n\tat org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2220)\n\tat org.apache.hadoop.ipc.Server$Handler$1.run(Server.java:2216)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat javax.security.auth.Subject.doAs(Subject.java:422)\n\tat org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1920)\n\tat org.apache.hadoop.ipc.Server$Handler.run(Server.java:2214)\n\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1475)\n\tat org.apache.hadoop.ipc.Client.call(Client.java:1412)\n\tat org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:229)\n\tat com.sun.proxy.$Proxy17.getFileInfo(Unknown Source)\n\tat org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.getFileInfo(ClientNamenodeProtocolTranslatorPB.java:771)\n\tat sun.reflect.GeneratedMethodAccessor71.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:191)\n\tat org.apache.hadoop.io.retry.RetryInvocationHandler.invoke(RetryInvocationHandler.java:102)\n\tat com.sun.proxy.$Proxy18.getFileInfo(Unknown Source)\n\tat org.apache.hadoop.hdfs.DFSClient.getFileInfo(DFSClient.java:2108)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1305)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1301)\n\tat org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)\n\tat org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:1317)\n\tat org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426)\n\tat org.apache.spark.ml.util.FileSystemOverwrite.handleOverwrite(ReadWrite.scala:497)\n\tat org.apache.spark.ml.util.MLWriter.save(ReadWrite.scala:102)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\n",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771ad0fc-baff-11e8-bdfa-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "Tes Model",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1541140064045",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "3f9eae34-c6f2-11e8-a4db-0242ac110002",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Silver Price at London 2015-2018', 'Binarizer', 'Adapter', 'LinearSVC', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771ad0ee-baff-11e8-8e06-08d40cec20c9/1/1537424823330', 'columns': ['price_usd', 'price_eur', 'price_gbp'], 'data_in_coloumn_types': ['double', 'double', 'double']}, {'input': [{'name': 'inputCol', 'display_name': 'Input Column', 'description': 'input column name.', 'mandatory': True, 'datatype': 'double', 'value': 'price_usd', 'error': ''}], 'output': [{'name': 'outputCol', 'display_name': 'Output Column', 'description': 'output column name.', 'mandatory': True, 'datatype': 'double', 'value': 'binarizer_output'}], 'params': [{'name': 'threshold', 'display_name': 'Threshold', 'description': 'threshold in binary classification prediction, in range [0, 1]', 'mandatory': True, 'datatype': 'float', 'value': 0}], 'id': 'jmsz2lqx', 'type': 'algorithm'}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}, {'name': 'mapping', 'display_name': 'Mapping Type', 'description': 'Select type of mapping, you can mapping datatype or mapping categorical', 'value': 'datatype_mapping', 'tempValue': 'Datatype Mapping', 'options': [{'label': 'Datatype Mapping', 'value': 'datatype_mapping'}, {'label': 'Categorical Mapping', 'value': 'categorical_mapping'}]}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'binarizer_output', 'value': 'binarizer_output', 'datatype': 'double'}], 'to': [{'value': 'double', 'datatype': 'int', 'label': 'double'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'price_usd', 'value': 'price_usd', 'datatype': 'double'}], 'to': [{'value': 'vector', 'datatype': 'vector', 'label': 'vector'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}], 'id': 'jmsz2ox7'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'int', 'value': 'double', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'vector', 'error': ''}], 'output': [{'name': 'rawPredictionCol', 'display_name': 'Raw Prediction Column', 'description': 'raw prediction (a.k.a. confidence) column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'rawPrediction'}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'threshold', 'display_name': 'Threshold', 'description': 'The threshold in binary classification applied to the linear model prediction.  This threshold can be any real number, where Inf will make all predictions 0.0 and -Inf will make all predictions 1.0.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'aggregationDepth', 'display_name': 'Aggregation Depth', 'description': 'suggested depth for treeAggregate (>= 2).', 'mandatory': True, 'datatype': 'int', 'value': 2}, {'name': 'standardization', 'display_name': 'Standardization', 'description': 'whether to standardize the training features before fitting the model.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'fitIntercept', 'display_name': 'Fit Intercept', 'description': 'whether to fit an intercept term.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 10}, {'name': 'regParam', 'display_name': 'Regularization Parameter', 'description': 'regularization parameter (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 0.01}, {'name': 'tol', 'display_name': 'Tolerance', 'description': 'the convergence tolerance for iterative algorithms (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 1e-06}], 'id': 'jmsz2af5', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'Test 16:53 3Okt'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'MulticlassClassificationEvaluator', 'tempValue': 'Multiclass Classification Evaluator', 'options': [{'value': 'MulticlassClassificationEvaluator', 'label': 'Multiclass Classification Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'f1', 'tempValue': 'F1', 'options': [{'label': 'F1', 'value': 'f1'}, {'label': 'Weighted Prediction', 'value': 'weightedPrecision'}, {'label': 'Weighted Recall', 'value': 'weightedRecall'}, {'label': 'Accuracy', 'value': 'accuracy'}]}], 'id': 'jmsz1ld5'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-10-03T09:53:56.164Z', 'username': '', 'pipeline_group_name': 'Test 16:53 3Okt', 'composer_id': '3f9eb00a-c6f2-11e8-a4db-0242ac110002', 'parents_data_id': ['771ad0ee-baff-11e8-8e06-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'Binarizer': 'None'}, {'LinearSVC': 'None'}]}, 'estimator': [{'Binarizer': {'inputCol': 'price_usd', 'outputCol': 'binarizer_output', 'threshold': 0}}, {'LinearSVC': {'labelCol': 'double', 'featuresCol': 'vector', 'rawPredictionCol': 'rawPrediction', 'predictionCol': 'prediction', 'threshold': 0, 'aggregationDepth': 2, 'standardization': True, 'fitIntercept': True, 'maxIter': 10, 'regParam': 0.01, 'tol': 1e-06}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'f1', 'predictionCol': 'predictionCol', 'labelCol': 'labelCol'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/raw/771ad0ee-baff-11e8-8e06-08d40cec20c9/1/1537424823330'], 'action': {'adapter': [[{'from': [{'value': 'binarizer_output', 'datatype': 'double'}], 'to': [{'value': 'double', 'datatype': 'int'}]}, {'from': [{'value': 'p116102', 'datatype': 'string'}], 'to': [{'value': 'vector', 'datatype': 'vector'}]}, {'from': [{'value': 'p116102', 'datatype': 'string'}], 'to': [{'value': 'price_usd', 'datatype': 'double'}]}, {'from': [{'value': 'p116102', 'datatype': 'string'}], 'to': [{'value': 'price_usd', 'datatype': 'double'}]}]], 'join': 'None'}, 'hash_map': [['p116102', 'p3124973', 'p102133']], 'hash_dict': {'p116102': {'name': 'price_usd', 'datatype': 'double'}, 'p3124973': {'name': 'price_eur', 'datatype': 'double'}, 'p102133': {'name': 'price_gbp', 'datatype': 'double'}}, 'input_col': ['price_usd', 'double', 'vector'], 'column_input_dictionary': {'price_usd': {'datatype': 'double'}, 'double': {'datatype': 'int', 'columns': 'binarizer_output'}, 'vector': {'datatype': 'vector', 'columns': ['price_usd'], 'columns_datatype': ['double']}}}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': '3f9eae34-c6f2-11e8-a4db-0242ac110002'}",
    "composer_id": "3f9eb00a-c6f2-11e8-a4db-0242ac110002",
    "date": "2018-10-03T09:53:56.164Z",
    "endpoints": {
      "async": "https://api.volantis.io/v1/predict/async/model/3f9eb690-c6f2-11e8-a4db-0242ac110002",
      "sync": "https://api.volantis.io/v1/predict/sync/model/3f9eb5a0-c6f2-11e8-a4db-0242ac110002"
    },
    "endpoints_service_id": {
      "async": "3f9eb7d0-c6f2-11e8-a4db-0242ac110002",
      "sync": "3f9eb73a-c6f2-11e8-a4db-0242ac110002"
    },
    "fit_status": "IN PROGRESS",
    "input_col": null,
    "log_error": "src_cols: some column names do not exist in dataframe.",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": "3f9eae34-c6f2-11e8-a4db-0242ac110002",
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771ad0ee-baff-11e8-8e06-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "Test 16:53 3Okt",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "c22a7ec2-c509-11e8-acbe-0242ac110003",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Diabetes Dataset - Pima Indian heritage', 'Adapter', 'StandardScaler', 'IsotonicRegression', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926', 'columns': ['glucose', 'blood_pressure', 'age', 'skin_thickness', 'insulin', 'bmi', 'pregnancies', 'pedigree_function', 'status'], 'data_in_coloumn_types': ['double', 'double', 'double', 'double', 'double', 'double', 'integer', 'double', 'string']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'glucose', 'value': 'glucose', 'datatype': 'double'}, {'label': 'blood_pressure', 'value': 'blood_pressure', 'datatype': 'double'}, {'label': 'age', 'value': 'age', 'datatype': 'double'}, {'label': 'skin_thickness', 'value': 'skin_thickness', 'datatype': 'double'}, {'label': 'insulin', 'value': 'insulin', 'datatype': 'double'}, {'label': 'bmi', 'value': 'bmi', 'datatype': 'double'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'pedigree_function', 'value': 'pedigree_function', 'datatype': 'double'}], 'to': [{'value': 'label', 'datatype': 'double', 'label': 'label'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}], 'id': 'jmpi5u9m'}, {'input': [{'name': 'inputCol', 'display_name': 'Input Column', 'description': 'input column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'outputCol', 'display_name': 'Output Column', 'description': 'output column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'standard_scaler_output'}], 'params': [{'name': 'withMean', 'display_name': 'Center Data with Mean', 'description': 'Center data with mean', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'withStd', 'display_name': 'Scale to Unit Standard Deviation', 'description': 'Scale to unit standard deviation', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}], 'id': 'jmpi61t4', 'type': 'algorithm'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'label', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'standard_scaler_output', 'error': ''}, {'name': 'weightCol', 'display_name': 'Weight Column', 'description': 'weight column name. If this is not set or empty, we treat all instance weights as 1.0.', 'mandatory': False, 'datatype': 'double', 'value': None, 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'isotonic', 'display_name': 'Isotonic', 'description': 'whether the output sequence should be isotonic/increasing (true) orantitonic/decreasing (false).', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'featureIndex', 'display_name': 'Feature Index', 'description': 'The index of the feature if featuresCol is a vector column, no effect otherwise.', 'mandatory': True, 'datatype': 'int', 'value': 0}], 'id': 'jmpi6cv4', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'pedigree function pima indian lagi'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'RegressionEvaluator', 'tempValue': 'Regression Evaluator', 'options': [{'value': 'RegressionEvaluator', 'label': 'Regression Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'rmse', 'tempValue': 'RMSE', 'options': [{'label': 'RMSE', 'value': 'rmse'}, {'label': 'MSE', 'value': 'mse'}, {'label': 'MAE', 'value': 'mae'}]}], 'id': 'jmpi6pxa'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-09-30T23:37:11.734Z', 'username': '', 'pipeline_group_name': 'pedigree function pima indian lagi', 'composer_id': 'c22a808e-c509-11e8-acbe-0242ac110003', 'parents_data_id': ['771d330d-baff-11e8-97a2-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'StandardScaler': 'None'}, {'IsotonicRegression': 'None'}]}, 'estimator': [{'StandardScaler': {'inputCol': 'features', 'outputCol': 'standard_scaler_output', 'withMean': False, 'withStd': True}}, {'IsotonicRegression': {'labelCol': 'label', 'featuresCol': 'standard_scaler_output', 'predictionCol': 'prediction', 'isotonic': True, 'featureIndex': 0}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'predictionCol', 'labelCol': 'labelCol'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926'], 'action': {'adapter': [{'from': [{'value': 'p1791311822', 'datatype': 'string'}, {'value': 'n633416129', 'datatype': 'string'}, {'value': 'p96511', 'datatype': 'string'}, {'value': 'n797229481', 'datatype': 'string'}, {'value': 'n672703798', 'datatype': 'string'}, {'value': 'p97662', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}]}, {'from': [{'value': 'p601974336', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'double'}]}], 'join': 'None'}, 'hash_map': [['p1791311822', 'n633416129', 'p96511', 'n797229481', 'n672703798', 'p97662', 'n1643403125', 'p601974336', 'p558145330']], 'input_col': ['features', 'label', 'standard_scaler_output']}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': 'c22a7ec2-c509-11e8-acbe-0242ac110003'}",
    "composer_id": "c22a808e-c509-11e8-acbe-0242ac110003",
    "date": "2018-09-30T23:37:11.734Z",
    "endpoints": {
      "async": "https://159.65.142.155:18000/v1/predict/async/model/c22a87aa-c509-11e8-acbe-0242ac110003",
      "sync": "https://159.65.142.155:18000/v1/predict/sync/model/c22a86c4-c509-11e8-acbe-0242ac110003"
    },
    "endpoints_service_id": {
      "async": "c22a88ea-c509-11e8-acbe-0242ac110003",
      "sync": "c22a8854-c509-11e8-acbe-0242ac110003"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "'str' object has no attribute 'get'",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771d330d-baff-11e8-97a2-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "pedigree function pima indian lagi",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1538972109791",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "f99f426c-c508-11e8-aa85-0242ac110003",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Diabetes Dataset - Pima Indian heritage', 'Adapter', 'StandardScaler', 'IsotonicRegression', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926', 'columns': ['glucose', 'blood_pressure', 'age', 'skin_thickness', 'insulin', 'bmi', 'pregnancies', 'pedigree_function', 'status'], 'data_in_coloumn_types': ['double', 'double', 'double', 'double', 'double', 'double', 'integer', 'double', 'string']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'glucose', 'value': 'glucose', 'datatype': 'double'}, {'label': 'blood_pressure', 'value': 'blood_pressure', 'datatype': 'double'}, {'label': 'age', 'value': 'age', 'datatype': 'double'}, {'label': 'skin_thickness', 'value': 'skin_thickness', 'datatype': 'double'}, {'label': 'insulin', 'value': 'insulin', 'datatype': 'double'}, {'label': 'bmi', 'value': 'bmi', 'datatype': 'double'}, {'label': 'pregnancies', 'value': 'pregnancies', 'datatype': 'integer'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'pedigree_function', 'value': 'pedigree_function', 'datatype': 'double'}], 'to': [{'value': 'label', 'datatype': 'double', 'label': 'label'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}], 'id': 'jmphxaul'}, {'input': [{'name': 'inputCol', 'display_name': 'Input Column', 'description': 'input column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}], 'output': [{'name': 'outputCol', 'display_name': 'Output Column', 'description': 'output column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'standard_scaler_output'}], 'params': [{'name': 'withMean', 'display_name': 'Center Data with Mean', 'description': 'Center data with mean', 'mandatory': True, 'datatype': 'bool', 'value': False, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': False}, {'name': 'withStd', 'display_name': 'Scale to Unit Standard Deviation', 'description': 'Scale to unit standard deviation', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}], 'id': 'jmphxkwj', 'type': 'algorithm'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'label', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'standard_scaler_output', 'error': ''}, {'name': 'weightCol', 'display_name': 'Weight Column', 'description': 'weight column name. If this is not set or empty, we treat all instance weights as 1.0.', 'mandatory': False, 'datatype': 'double', 'value': None, 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'isotonic', 'display_name': 'Isotonic', 'description': 'whether the output sequence should be isotonic/increasing (true) orantitonic/decreasing (false).', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'featureIndex', 'display_name': 'Feature Index', 'description': 'The index of the feature if featuresCol is a vector column, no effect otherwise.', 'mandatory': True, 'datatype': 'int', 'value': 0}], 'id': 'jmphy6yl', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'pedigree function pima indian'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': 'RegressionEvaluator', 'tempValue': 'Regression Evaluator', 'options': [{'value': 'RegressionEvaluator', 'label': 'Regression Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 3}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'value': 'predictionCol'}, {'name': 'labelCol', 'display_name': 'Label Column', 'value': 'labelCol'}, {'name': 'metricName', 'display_name': 'Metric Name', 'value': 'rmse', 'tempValue': 'RMSE', 'options': [{'label': 'RMSE', 'value': 'rmse'}, {'label': 'MSE', 'value': 'mse'}, {'label': 'MAE', 'value': 'mae'}]}], 'id': 'jmphycuz'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-09-30T23:31:34.798Z', 'username': '', 'pipeline_group_name': 'pedigree function pima indian', 'composer_id': 'f99f44f6-c508-11e8-aa85-0242ac110003', 'parents_data_id': ['771d330d-baff-11e8-97a2-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 3, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'StandardScaler': 'None'}, {'IsotonicRegression': 'None'}]}, 'estimator': [{'StandardScaler': {'inputCol': 'features', 'outputCol': 'standard_scaler_output', 'withMean': False, 'withStd': True}}, {'IsotonicRegression': {'labelCol': 'label', 'featuresCol': 'standard_scaler_output', 'predictionCol': 'prediction', 'isotonic': True, 'featureIndex': 0}}], 'evaluator': {'name': 'RegressionEvaluator', 'params': {'metricName': 'rmse', 'predictionCol': 'predictionCol', 'labelCol': 'labelCol'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926'], 'action': {'adapter': [{'from': [{'value': 'p1791311822', 'datatype': 'string'}, {'value': 'n633416129', 'datatype': 'string'}, {'value': 'p96511', 'datatype': 'string'}, {'value': 'n797229481', 'datatype': 'string'}, {'value': 'n672703798', 'datatype': 'string'}, {'value': 'p97662', 'datatype': 'string'}, {'value': 'n1643403125', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}]}, {'from': [{'value': 'p601974336', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'double'}]}], 'join': 'None'}, 'hash_map': [['p1791311822', 'n633416129', 'p96511', 'n797229481', 'n672703798', 'p97662', 'n1643403125', 'p601974336', 'p558145330']], 'input_col': ['features', 'label', 'standard_scaler_output']}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': 'f99f426c-c508-11e8-aa85-0242ac110003'}",
    "composer_id": "f99f44f6-c508-11e8-aa85-0242ac110003",
    "date": "2018-09-30T23:31:34.798Z",
    "endpoints": {
      "async": "https://159.65.142.155:18000/v1/predict/async/model/f9b1ff74-c508-11e8-aa85-0242ac110003",
      "sync": "https://159.65.142.155:18000/v1/predict/sync/model/f9b1fdb2-c508-11e8-aa85-0242ac110003"
    },
    "endpoints_service_id": {
      "async": "f9b200d2-c508-11e8-aa85-0242ac110003",
      "sync": "f9b20032-c508-11e8-aa85-0242ac110003"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "'str' object has no attribute 'get'",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771d330d-baff-11e8-97a2-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "pedigree function pima indian",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1538972105985",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": true,
    "fit_id": "4dd2531c-c241-11e8-aa5a-0242ac110003",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Diabetes Dataset - Pima Indian heritage', 'Adapter', 'LinearSVC', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926', 'columns': ['glucose', 'blood_pressure', 'age', 'skin_thickness', 'insulin', 'bmi', 'pregnancies', 'pedigree_function', 'status'], 'data_in_coloumn_types': ['double', 'double', 'double', 'double', 'double', 'double', 'integer', 'double', 'string']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': 2}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'glucose', 'value': 'glucose', 'datatype': 'double'}, {'label': 'blood_pressure', 'value': 'blood_pressure', 'datatype': 'double'}, {'label': 'age', 'value': 'age', 'datatype': 'double'}, {'label': 'skin_thickness', 'value': 'skin_thickness', 'datatype': 'double'}, {'label': 'insulin', 'value': 'insulin', 'datatype': 'double'}, {'label': 'bmi', 'value': 'bmi', 'datatype': 'double'}, {'label': 'pregnancies', 'value': 'pregnancies', 'datatype': 'integer'}, {'label': 'pedigree_function', 'value': 'pedigree_function', 'datatype': 'double'}], 'to': [{'value': 'features', 'datatype': 'vector', 'label': 'features'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'status', 'value': 'status', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'double', 'label': 'label'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}], 'id': 'jmkfw5ou'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'label', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'features', 'error': ''}, {'name': 'weightCol', 'display_name': 'Weight Column', 'description': 'weight column name. If this is not set or empty, we treat all instance weights as 1.0.', 'mandatory': False, 'datatype': 'double', 'value': None, 'error': ''}], 'output': [{'name': 'rawPredictionCol', 'display_name': 'Raw Prediction Column', 'description': 'raw prediction (a.k.a. confidence) column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'rawPrediction'}, {'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'threshold', 'display_name': 'Threshold', 'description': 'The threshold in binary classification applied to the linear model prediction.  This threshold can be any real number, where Inf will make all predictions 0.0 and -Inf will make all predictions 1.0.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'aggregationDepth', 'display_name': 'Aggregation Depth', 'description': 'suggested depth for treeAggregate (>= 2).', 'mandatory': True, 'datatype': 'int', 'value': 2}, {'name': 'standardization', 'display_name': 'Standardization', 'description': 'whether to standardize the training features before fitting the model.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'fitIntercept', 'display_name': 'Fit Intercept', 'description': 'whether to fit an intercept term.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 100}, {'name': 'regParam', 'display_name': 'Regularization Parameter', 'description': 'regularization parameter (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'tol', 'display_name': 'Tolerance', 'description': 'the convergence tolerance for iterative algorithms (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 1e-06}], 'id': 'jmkfurzs', 'type': 'algorithm'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'Diabetes Dataset SVC'}, {'name': 'type', 'display_name': 'Type', 'value': 'CrossValidator', 'tempValue': 'Cross Validator', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}, {'name': 'evaluator', 'display_name': 'Evaluator', 'value': '', 'tempValue': '', 'options': [{'value': 'MulticlassClassificationEvaluator', 'label': 'Multiclass Classification Evaluator'}]}, {'name': 'numFolds', 'display_name': 'Fold Number', 'value': 10}], 'id': 'jmkfuzgp'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-09-27T10:37:07.314Z', 'username': '', 'pipeline_group_name': 'Diabetes Dataset SVC', 'composer_id': '4dd254fc-c241-11e8-aa5a-0242ac110003', 'parents_data_id': ['771d330d-baff-11e8-97a2-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [0], 'parents_model_price': [], 'type': 'CrossValidator', 'numFolds': 10, 'last_stage': 'fit', 'estimatorParamMaps': {'ParamGridBuilder': [{'LinearSVC': 'None'}]}, 'estimator': [{'LinearSVC': {'labelCol': 'label', 'featuresCol': 'features', 'rawPredictionCol': 'rawPrediction', 'predictionCol': 'prediction', 'threshold': 0, 'aggregationDepth': 2, 'standardization': True, 'fitIntercept': True, 'maxIter': 100, 'regParam': 0, 'tol': 1e-06}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'f1'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/raw/771d330d-baff-11e8-97a2-08d40cec20c9/1/1537417145926'], 'action': {'adapter': [{'from': [{'value': 'p1791311822', 'datatype': 'string'}, {'value': 'n633416129', 'datatype': 'string'}, {'value': 'p96511', 'datatype': 'string'}, {'value': 'n797229481', 'datatype': 'string'}, {'value': 'n672703798', 'datatype': 'string'}, {'value': 'p97662', 'datatype': 'string'}, {'value': 'n1643403125', 'datatype': 'string'}, {'value': 'p601974336', 'datatype': 'string'}], 'to': [{'value': 'features', 'datatype': 'vector'}]}, {'from': [{'value': 'p558145330', 'datatype': 'string'}], 'to': [{'value': 'label', 'datatype': 'double'}]}], 'join': 'None'}, 'hash_map': [['p1791311822', 'n633416129', 'p96511', 'n797229481', 'n672703798', 'p97662', 'n1643403125', 'p601974336', 'p558145330']], 'input_col': ['label', 'features']}, 'output_col': 'all', 'trainRatio': 1, 'fit_id': '4dd2531c-c241-11e8-aa5a-0242ac110003'}",
    "composer_id": "4dd254fc-c241-11e8-aa5a-0242ac110003",
    "date": "2018-09-27T10:37:07.314Z",
    "endpoints": {
      "async": "https://159.65.142.155:18000/v1/predict/async/model/4dd25f7e-c241-11e8-aa5a-0242ac110003",
      "sync": "https://159.65.142.155:18000/v1/predict/sync/model/4dd25dc6-c241-11e8-aa5a-0242ac110003"
    },
    "endpoints_service_id": {
      "async": "4dd261c2-c241-11e8-aa5a-0242ac110003",
      "sync": "4dd260b4-c241-11e8-aa5a-0242ac110003"
    },
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "'str' object has no attribute 'get'",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771d330d-baff-11e8-97a2-08d40cec20c9"
    ],
    "parents_data_price": [
      0
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "Diabetes Dataset SVC",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1538972087432",
    "username": "",
    "pricing": {
      "minimum_price": 0,
      "actual_price": null
    }
  },
  {
    "is_monetized": false,
    "fit_id": "0e5a33a2-bfc7-11e8-a07a-0242ac110003",
    "user_id": "b5f232f3-18b9-4a5a-b728-b2fcddfed955",
    "algorithm_configuration": "{'pipeline': ['dataset - Crude Oil 2003-2018', 'Adapter', 'LinearRegression', 'As New Model'], 'parameter': [{'type': 'dataset', 'path': '/laniakea/asset/dataset/mapped/771ad0f1-baff-11e8-a9f2-08d40cec20c9/node_1_1537419219728.parquet', 'columns': ['price'], 'data_in_coloumn_types': ['double']}, {'name': 'adapter', 'display_name': 'Adapter', 'type': 'adapter', 'params': [{'name': 'defineColumn', 'display_name': 'Define Column', 'description': 'Select how many column do you want to adapt', 'value': '2'}], 'mapping': [{'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'price', 'value': 'price', 'datatype': 'double'}], 'to': [{'value': 'ff', 'datatype': 'double', 'label': 'ff'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}, {'name': 'newColumn', 'display_name': 'New Column', 'description': 'Select column you want to adapt then define new column and dataype', 'from': [{'label': 'price', 'value': 'price', 'datatype': 'double'}], 'to': [{'value': 'tt', 'datatype': 'vector', 'label': 'tt'}], 'options': [{'label': 'int', 'value': 'int'}, {'label': 'double', 'value': 'double'}, {'label': 'vector', 'value': 'vector'}]}], 'id': 'jmfxr53o'}, {'input': [{'name': 'labelCol', 'display_name': 'Label Column', 'description': 'label column name.', 'mandatory': True, 'datatype': 'double', 'value': 'ff', 'error': ''}, {'name': 'featuresCol', 'display_name': 'Features Column', 'description': 'features column name.', 'mandatory': True, 'datatype': 'vector', 'value': 'tt', 'error': ''}, {'name': 'weightCol', 'display_name': 'Weight Column', 'description': 'weight column name. If this is not set or empty, we treat all instance weights as 1.0.', 'mandatory': False, 'datatype': 'double', 'value': 'price', 'error': ''}], 'output': [{'name': 'predictionCol', 'display_name': 'Prediction Column', 'description': 'prediction column name.', 'mandatory': True, 'datatype': 'double', 'value': 'prediction'}], 'params': [{'name': 'aggregationDepth', 'display_name': 'Aggregation Depth', 'description': 'suggested depth for treeAggregate (>= 2).', 'mandatory': True, 'datatype': 'int', 'value': 2}, {'name': 'solver', 'display_name': 'Solver Algorithm', 'description': 'The solver algorithm for optimization. Supported options: auto, normal, l-bfgs.', 'mandatory': True, 'datatype': 'str', 'value': 'auto'}, {'name': 'standardization', 'display_name': 'Standardization', 'description': 'whether to standardize the training features before fitting the model.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'fitIntercept', 'display_name': 'Fit Intercept', 'description': 'whether to fit an intercept term.', 'mandatory': True, 'datatype': 'bool', 'value': True, 'options': [{'label': True, 'value': True}, {'label': False, 'value': False}], 'tempValue': True}, {'name': 'elasticNetParam', 'display_name': 'ElasticNet Parameter', 'description': 'the ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty.', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'maxIter', 'display_name': 'Maximum Iteration', 'description': 'max number of iterations (>= 0).', 'mandatory': True, 'datatype': 'int', 'value': 100}, {'name': 'regParam', 'display_name': 'Regularization Parameter', 'description': 'regularization parameter (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 0}, {'name': 'tol', 'display_name': 'Tolerance', 'description': 'the convergence tolerance for iterative algorithms (>= 0).', 'mandatory': True, 'datatype': 'float', 'value': 1e-06}, {'name': 'loss', 'display_name': 'Loss', 'description': 'The loss function to be optimized. Supported options: squaredError, huber.', 'mandatory': True, 'datatype': 'str', 'value': 'squaredError'}, {'name': 'epsilon', 'display_name': 'Epsilon', 'description': 'The shape parameter to control the amount of robustness. Must be > 1.0. Only valid when loss is huber', 'mandatory': True, 'datatype': 'float', 'value': 1.35}], 'id': 'jmfxrh7f'}, {'name': 'asNewModel', 'type': 'asNewModel', 'display_name': 'As New Model', 'params': [{'name': 'pipeline_group_name', 'display_name': 'Model Name', 'value': 'yyy'}, {'name': 'type', 'display_name': 'Type', 'value': 'generalPipeline', 'tempValue': 'General Pipeline', 'options': [{'label': 'General Pipeline', 'value': 'GeneralPipeline'}, {'label': 'Cross Validator', 'value': 'CrossValidator'}, {'label': 'Train Validation Split', 'value': 'TrainValidationSplit'}]}], 'id': 'jmfxrsgu'}], 'user_id': 'b5f232f3-18b9-4a5a-b728-b2fcddfed955', 'date': '2018-09-24T06:57:00.944Z', 'username': '', 'pipeline_group_name': 'yyy', 'composer_id': '0e5a36b8-bfc7-11e8-a07a-0242ac110003', 'parents_data_id': ['771ad0f1-baff-11e8-a9f2-08d40cec20c9'], 'parents_user_id_model': [], 'parents_model_id': [], 'parents_user_id_data': ['b5f232f3-18b9-4a5a-b728-b2fcddfed955'], 'parents_data_price': [1], 'parents_model_price': [], 'last_stage': 'fit', 'type': 'GeneralPipeline', 'trainRatio': 1, 'numFolds': 1, 'output_col': 'all', 'estimatorParamMaps': {'ParamGridBuilder': [{'LinearRegression': 'None'}]}, 'estimator': [{'LinearRegression': {'labelCol': 'ff', 'featuresCol': 'tt', 'weightCol': 'price', 'predictionCol': 'prediction', 'aggregationDepth': 2, 'solver': 'auto', 'standardization': True, 'fitIntercept': True, 'elasticNetParam': 0, 'maxIter': 100, 'regParam': 0, 'tol': 1e-06, 'loss': 'squaredError', 'epsilon': 1.35}}], 'evaluator': {'name': 'MulticlassClassificationEvaluator', 'params': {'metricName': 'f1'}}, 'data': {'path': ['hdfs://159.89.198.183:9001/laniakea/asset/dataset/mapped/771ad0f1-baff-11e8-a9f2-08d40cec20c9/node_1_1537419219728.parquet'], 'action': {'adapter': [{'from': [{'value': 'price', 'datatype': 'double'}], 'to': [{'value': 'ff', 'datatype': 'double'}]}, {'from': [{'value': 'price', 'datatype': 'double'}], 'to': [{'value': 'tt', 'datatype': 'vector'}]}], 'join': 'None'}}, 'fit_id': '0e5a33a2-bfc7-11e8-a07a-0242ac110003'}",
    "composer_id": "0e5a36b8-bfc7-11e8-a07a-0242ac110003",
    "date": "2018-09-24T06:57:00.944Z",
    "endpoints": null,
    "endpoints_service_id": null,
    "fit_status": "FAIL",
    "input_col": null,
    "log_error": "'input_col'",
    "mapping": null,
    "memory_consumed": null,
    "metric_performance": null,
    "model_id_output": null,
    "output_col": null,
    "params": null,
    "parents_data_id": [
      "771ad0f1-baff-11e8-a9f2-08d40cec20c9"
    ],
    "parents_data_price": [
      1
    ],
    "parents_model_id": null,
    "parents_model_price": null,
    "parents_user_id_data": [
      "b5f232f3-18b9-4a5a-b728-b2fcddfed955"
    ],
    "parents_user_id_model": null,
    "path_model_output": null,
    "pipeline_group_name": "yyy",
    "running_time": null,
    "schema_data_output_input": null,
    "schema_data_output_output": null,
    "size_data_input": null,
    "spark_job_id": "local-1537772235312",
    "username": "",
    "pricing": {
      "minimum_price": 1,
      "actual_price": null
    }
  }
]